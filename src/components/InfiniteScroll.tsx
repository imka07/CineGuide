import React, { useEffect, useRef, useState } from 'react';
import { useSearchParams } from 'react-router-dom';
import api from '../api/tmdbProxy';
import MovieCard from '../components/MovieCard';
import type { Movie } from '../types';
import { filterSafeContent, logBlockedContent } from '../utils/contentFilter';
import { testContentFilter, testSpecificMovie } from '../utils/contentFilterTest';
import '../styles/InfiniteScroll.css';

const InfiniteScroll: React.FC = () => {
  const [movies, setMovies] = useState<Movie[]>([]);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const loader = useRef<HTMLDivElement>(null);
  const [searchParams] = useSearchParams();

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ (—Ç–æ–ª—å–∫–æ –≤ development)
  useEffect(() => {
    if (import.meta.env.DEV) {
      testContentFilter();
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∏–ª—å–º—ã
      console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤:');
      testSpecificMovie("–í–æ–π–Ω–∞ –º–∏—Ä–æ–≤", ["sci-fi", "action"], 4.6, 2025);
      testSpecificMovie("–ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å –¥–µ–º–æ–Ω–æ–≤: –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –∑–∞–º–æ–∫", ["animation", "action"], 7.0, 2025);
      testSpecificMovie("–ú–ó–ì–ê–ù", ["action", "drama"], 6.5, 2024);
    }
  }, []);

  // –ë–∞–∑–æ–≤—ã–π URL –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
  const proxyUrl = import.meta.env.VITE_PROXY_URL || 'http://localhost:3000';

  // –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const filters = {
    genre: searchParams.getAll('genre'),
    ratingGte: Number(searchParams.get('ratingGte') ?? 0),
    ratingLte: Number(searchParams.get('ratingLte') ?? 10),
    yearGte: Number(searchParams.get('yearGte') ?? 1990),
    yearLte: Number(searchParams.get('yearLte') ?? new Date().getFullYear()),
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å–º–æ–≤
  const fetchMovies = async () => {
    if (loading) return;
    
    try {
      setLoading(true);
      setError(null);
      
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ /discover/movie
      const params: Record<string, any> = {
        page,
        sort_by: 'popularity.desc',
        'vote_average.gte': filters.ratingGte,
        'vote_average.lte': filters.ratingLte,
        'primary_release_date.gte': `${filters.yearGte}-01-01`,
        'primary_release_date.lte': `${filters.yearLte}-12-31`,
      };
      if (filters.genre.length) {
        params.with_genres = filters.genre.join(',');
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const { data } = await api.get('/discover/movie', { params });
      const results = Array.isArray(data.results) ? data.results : [];

      // –ú–∞–ø–∏–º –≤ –Ω–∞—à—É –º–æ–¥–µ–ª—å Movie
      const newMovies: Movie[] = results.map((doc: any) => ({
        id: String(doc.id),
        title: doc.title || doc.name || 'Unknown',
        year: doc.release_date
          ? new Date(doc.release_date).getFullYear()
          : new Date().getFullYear(),
        rating: doc.vote_average || 0,
        // –¢–µ–ø–µ—Ä—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏–¥—ë—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        poster: doc.poster_path
          ? { url: `${proxyUrl}/image${doc.poster_path}` }
          : null,
        genres: doc.genres?.map((g: any) => g.name) || [],
      }));

                  // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –í–ö
            const safeMovies = filterSafeContent(newMovies);
            
            console.log(`üìä –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: ${newMovies.length} —Ñ–∏–ª—å–º–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ, ${safeMovies.length} –ø—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é`);

            // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            const blockedMovies = newMovies.filter(movie => !filterSafeContent([movie]).length);
            if (blockedMovies.length > 0) {
              console.log(`‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ ${blockedMovies.length} —Ñ–∏–ª—å–º–æ–≤:`);
              blockedMovies.forEach(movie => {
                console.log(`   - ${movie.title} (${movie.year}, —Ä–µ–π—Ç–∏–Ω–≥: ${movie.rating})`);
                logBlockedContent(movie, '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –í–ö');
              });
            }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ–∏–ª—å–º—ã
      setMovies(prev => {
        const existing = new Set(prev.map(m => m.id));
        const uniq = safeMovies.filter(m => !existing.has(m.id));
        return [...prev, ...uniq];
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â—ë —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      setHasMore(typeof data.total_pages === 'number' ? page < data.total_pages : false);
    } catch (err) {
      console.error('fetchMovies error:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å–º–æ–≤');
    } finally {
      setLoading(false);
    }
  };

  // –ü—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
  useEffect(() => {
    setMovies([]);
    setPage(1);
    setHasMore(true);
  }, [searchParams.toString()]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–µ –∏ –Ω–∞ —Å–º–µ–Ω—É page
  useEffect(() => {
    fetchMovies();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [page, searchParams.toString()]);

  // –ò–Ω—Ç–µ—Ä—Å–µ–∫—à–Ω-–æ–±—Å–µ—Ä–≤–µ—Ä –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting && hasMore) {
          setPage(p => p + 1);
        }
      },
      { threshold: 1 }
    );
    if (loader.current) observer.observe(loader.current);
    return () => {
      if (loader.current) observer.unobserve(loader.current);
    };
  }, [hasMore]);

  if (error) {
    return (
      <div className="error-container">
        <p className="error">{error}</p>
        <button onClick={() => window.location.reload()} className="retry-btn">
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  return (
    <>
      <div className="movie-list">
        {movies.map(m => (
          <MovieCard key={m.id} movie={m} />
        ))}
      </div>

      {hasMore && (
        <div ref={loader} className="loading">
          {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏'}
        </div>
      )}
    </>
  );
};

export default InfiniteScroll;
