import React, { useEffect, useState } from 'react';
import { useParams, Navigate } from 'react-router-dom';
import api from '../api/tmdbProxy';
import { isContentSafe, logBlockedContent } from '../utils/contentFilter';


interface MovieDetailData {
  id: string;
  title: string;
  year: number;
  rating: number;
  overview: string;
  poster: { url: string } | null;
  releaseDate: string;
  genres: string[];
}

const MovieDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const [movie, setMovie] = useState<MovieDetailData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    console.log('üé¨ MovieDetail: –ø–æ–ª—É—á–µ–Ω ID –∏–∑ URL:', id);
    console.log('   –¢–∏–ø ID:', typeof id);
    
    if (!id) {
      console.error('‚ùå –û—à–∏–±–∫–∞: ID —Ñ–∏–ª—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL');
      setError('ID —Ñ–∏–ª—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      setLoading(false);
      return;
    }

    console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞ —Å ID:', id);

    const proxy = import.meta.env.VITE_PROXY_URL;
    const fetchDetail = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const { data } = await api.get(`/movie/${id}`);
        
        if (!data || !data.id) {
          throw new Error('–î–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞:', data.title);
        console.log('   –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API:', data);
        
        const movieData = {
          id: String(data.id),
          title: data.title || data.name || 'Unknown',
          year: data.release_date
            ? new Date(data.release_date).getFullYear()
            : new Date().getFullYear(),
          rating: data.vote_average || 0,
          overview: data.overview || '',
          poster: data.poster_path
            ? { url: `${proxy}/image${data.poster_path}` }
            : null,
          releaseDate: data.release_date || '',
          genres: data.genres?.map((g: any) => g.name) || [],
        };
        
        console.log('   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞:', movieData);
        setMovie(movieData);
      } catch (e) {
        console.error('API error:', e);
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å–º–∞');
      } finally {
        setLoading(false);
      }
    };
    
    fetchDetail();
  }, [id]);


  if (loading) return <p className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</p>;
  if (error) return <p className="error">{error}</p>;
  if (!movie) return <p className="not-found">–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.</p>;

  console.log('–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞:', movie.title);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const isSafe = isContentSafe({
    ...movie,
    overview: movie.overview
  });
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å–º–∞:', movie.title);
  console.log('   –†–µ–π—Ç–∏–Ω–≥:', movie.rating, '–ì–æ–¥:', movie.year, '–ñ–∞–Ω—Ä—ã:', movie.genres);
  console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', isSafe ? '‚úÖ –ë–ï–ó–û–ü–ê–°–ï–ù' : '‚ùå –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù');
  
  if (!isSafe) {
    logBlockedContent(movie, '–î–æ—Å—Ç—É–ø –∫ —Ñ–∏–ª—å–º—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
    return <Navigate to="/" replace />;
  }

  return (
    <div className="movie-detail-page">
      <h1>{movie.title}</h1>
      <div className="movie-detail-content">
        <div className="poster-container">
          {movie.poster ? (
            <img src={movie.poster.url} alt={`–ü–æ—Å—Ç–µ—Ä —Ñ–∏–ª—å–º–∞ ¬´${movie.title}¬ª`} />
          ) : (
            <div className="no-poster">No Image</div>
          )}
        </div>

        <div className="movie-detail-info">
          <p><strong>–†–µ–π—Ç–∏–Ω–≥:</strong> {movie.rating.toFixed(1)}</p>
          <p><strong>–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞:</strong> {new Date(movie.releaseDate).toLocaleDateString()}</p>
          <p><strong>–ì–æ–¥:</strong> {movie.year}</p>

          <div className="genres">
            {movie.genres.map(g => (
              <span key={g}>{g}</span>
            ))}
          </div>

          <div className="description">
            <p>{movie.overview}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MovieDetail;
